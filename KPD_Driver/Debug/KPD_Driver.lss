
KPD_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00001cc0  00001d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  00001d74  2**0
                  ALLOC
  3 .stab         000014f4  00000000  00000000  00001d74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d11  00000000  00000000  00003268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003f79  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000040b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005e72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000086c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	fc e1       	ldi	r31, 0x1C	; 28
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 38       	cpi	r26, 0x82	; 130
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <main>
      8a:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 43 0e 	jmp	0x1c86	; 0x1c86 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4f 0e 	jmp	0x1c9e	; 0x1c9e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidInit>:
#include "CLCD_interface.h"
#include "util/delay.h"

#define F_CPU 8000000

void CLCD_voidInit(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	6c 97       	sbiw	r28, 0x1c	; 28
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	DIO_u8_SetPort_Dir(CLCD_DATA_PORT,DIO_u8_PORT_Output);
     b5a:	82 e0       	ldi	r24, 0x02	; 2
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	0e 94 c5 0b 	call	0x178a	; 0x178a <DIO_u8_SetPort_Dir>

	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Output);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 83 0a 	call	0x1506	; 0x1506 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Output);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	41 e0       	ldi	r20, 0x01	; 1
     b72:	0e 94 83 0a 	call	0x1506	; 0x1506 <DIO_u8_SetPin_Dir>
	DIO_u8_SetPin_Dir(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Output);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	62 e0       	ldi	r22, 0x02	; 2
     b7a:	41 e0       	ldi	r20, 0x01	; 1
     b7c:	0e 94 83 0a 	call	0x1506	; 0x1506 <DIO_u8_SetPin_Dir>

	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	62 e0       	ldi	r22, 0x02	; 2
     b84:	40 e0       	ldi	r20, 0x00	; 0
     b86:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
     b8a:	80 e0       	ldi	r24, 0x00	; 0
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e2       	ldi	r26, 0x20	; 32
     b90:	b2 e4       	ldi	r27, 0x42	; 66
     b92:	89 8f       	std	Y+25, r24	; 0x19
     b94:	9a 8f       	std	Y+26, r25	; 0x1a
     b96:	ab 8f       	std	Y+27, r26	; 0x1b
     b98:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b9a:	69 8d       	ldd	r22, Y+25	; 0x19
     b9c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba2:	20 e0       	ldi	r18, 0x00	; 0
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	4a ef       	ldi	r20, 0xFA	; 250
     ba8:	54 e4       	ldi	r21, 0x44	; 68
     baa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	8d 8b       	std	Y+21, r24	; 0x15
     bb4:	9e 8b       	std	Y+22, r25	; 0x16
     bb6:	af 8b       	std	Y+23, r26	; 0x17
     bb8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     bba:	6d 89       	ldd	r22, Y+21	; 0x15
     bbc:	7e 89       	ldd	r23, Y+22	; 0x16
     bbe:	8f 89       	ldd	r24, Y+23	; 0x17
     bc0:	98 8d       	ldd	r25, Y+24	; 0x18
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	2c f4       	brge	.+10     	; 0xbdc <CLCD_voidInit+0x96>
		__ticks = 1;
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	9c 8b       	std	Y+20, r25	; 0x14
     bd8:	8b 8b       	std	Y+19, r24	; 0x13
     bda:	3f c0       	rjmp	.+126    	; 0xc5a <CLCD_voidInit+0x114>
	else if (__tmp > 65535)
     bdc:	6d 89       	ldd	r22, Y+21	; 0x15
     bde:	7e 89       	ldd	r23, Y+22	; 0x16
     be0:	8f 89       	ldd	r24, Y+23	; 0x17
     be2:	98 8d       	ldd	r25, Y+24	; 0x18
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	3f ef       	ldi	r19, 0xFF	; 255
     be8:	4f e7       	ldi	r20, 0x7F	; 127
     bea:	57 e4       	ldi	r21, 0x47	; 71
     bec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     bf0:	18 16       	cp	r1, r24
     bf2:	4c f5       	brge	.+82     	; 0xc46 <CLCD_voidInit+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bf4:	69 8d       	ldd	r22, Y+25	; 0x19
     bf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	40 e2       	ldi	r20, 0x20	; 32
     c02:	51 e4       	ldi	r21, 0x41	; 65
     c04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c08:	dc 01       	movw	r26, r24
     c0a:	cb 01       	movw	r24, r22
     c0c:	bc 01       	movw	r22, r24
     c0e:	cd 01       	movw	r24, r26
     c10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c14:	dc 01       	movw	r26, r24
     c16:	cb 01       	movw	r24, r22
     c18:	9c 8b       	std	Y+20, r25	; 0x14
     c1a:	8b 8b       	std	Y+19, r24	; 0x13
     c1c:	0f c0       	rjmp	.+30     	; 0xc3c <CLCD_voidInit+0xf6>
     c1e:	88 ec       	ldi	r24, 0xC8	; 200
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	9a 8b       	std	Y+18, r25	; 0x12
     c24:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c26:	89 89       	ldd	r24, Y+17	; 0x11
     c28:	9a 89       	ldd	r25, Y+18	; 0x12
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <CLCD_voidInit+0xe4>
     c2e:	9a 8b       	std	Y+18, r25	; 0x12
     c30:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c32:	8b 89       	ldd	r24, Y+19	; 0x13
     c34:	9c 89       	ldd	r25, Y+20	; 0x14
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	9c 8b       	std	Y+20, r25	; 0x14
     c3a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c3c:	8b 89       	ldd	r24, Y+19	; 0x13
     c3e:	9c 89       	ldd	r25, Y+20	; 0x14
     c40:	00 97       	sbiw	r24, 0x00	; 0
     c42:	69 f7       	brne	.-38     	; 0xc1e <CLCD_voidInit+0xd8>
     c44:	14 c0       	rjmp	.+40     	; 0xc6e <CLCD_voidInit+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c46:	6d 89       	ldd	r22, Y+21	; 0x15
     c48:	7e 89       	ldd	r23, Y+22	; 0x16
     c4a:	8f 89       	ldd	r24, Y+23	; 0x17
     c4c:	98 8d       	ldd	r25, Y+24	; 0x18
     c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	9c 8b       	std	Y+20, r25	; 0x14
     c58:	8b 8b       	std	Y+19, r24	; 0x13
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	98 8b       	std	Y+16, r25	; 0x10
     c60:	8f 87       	std	Y+15, r24	; 0x0f
     c62:	8f 85       	ldd	r24, Y+15	; 0x0f
     c64:	98 89       	ldd	r25, Y+16	; 0x10
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	f1 f7       	brne	.-4      	; 0xc66 <CLCD_voidInit+0x120>
     c6a:	98 8b       	std	Y+16, r25	; 0x10
     c6c:	8f 87       	std	Y+15, r24	; 0x0f

	/*wait for more than 30 msec*/
	_delay_ms(40);

	CLCD_voidSendCommand(lcd_Home);
     c6e:	82 e0       	ldi	r24, 0x02	; 2
     c70:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_FunctionSet8bit);
     c74:	88 e3       	ldi	r24, 0x38	; 56
     c76:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_DisplayOn);
     c7a:	8c e0       	ldi	r24, 0x0C	; 12
     c7c:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_Clear);
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	CLCD_voidSendCommand(lcd_EntryMode_Incr);
     c86:	86 e0       	ldi	r24, 0x06	; 6
     c88:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	a0 e0       	ldi	r26, 0x00	; 0
     c92:	b0 e4       	ldi	r27, 0x40	; 64
     c94:	8b 87       	std	Y+11, r24	; 0x0b
     c96:	9c 87       	std	Y+12, r25	; 0x0c
     c98:	ad 87       	std	Y+13, r26	; 0x0d
     c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	4a ef       	ldi	r20, 0xFA	; 250
     caa:	54 e4       	ldi	r21, 0x44	; 68
     cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8f 83       	std	Y+7, r24	; 0x07
     cb6:	98 87       	std	Y+8, r25	; 0x08
     cb8:	a9 87       	std	Y+9, r26	; 0x09
     cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cbc:	6f 81       	ldd	r22, Y+7	; 0x07
     cbe:	78 85       	ldd	r23, Y+8	; 0x08
     cc0:	89 85       	ldd	r24, Y+9	; 0x09
     cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	40 e8       	ldi	r20, 0x80	; 128
     cca:	5f e3       	ldi	r21, 0x3F	; 63
     ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cd0:	88 23       	and	r24, r24
     cd2:	2c f4       	brge	.+10     	; 0xcde <CLCD_voidInit+0x198>
		__ticks = 1;
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	9e 83       	std	Y+6, r25	; 0x06
     cda:	8d 83       	std	Y+5, r24	; 0x05
     cdc:	3f c0       	rjmp	.+126    	; 0xd5c <CLCD_voidInit+0x216>
	else if (__tmp > 65535)
     cde:	6f 81       	ldd	r22, Y+7	; 0x07
     ce0:	78 85       	ldd	r23, Y+8	; 0x08
     ce2:	89 85       	ldd	r24, Y+9	; 0x09
     ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ce6:	20 e0       	ldi	r18, 0x00	; 0
     ce8:	3f ef       	ldi	r19, 0xFF	; 255
     cea:	4f e7       	ldi	r20, 0x7F	; 127
     cec:	57 e4       	ldi	r21, 0x47	; 71
     cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf2:	18 16       	cp	r1, r24
     cf4:	4c f5       	brge	.+82     	; 0xd48 <CLCD_voidInit+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
     cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	40 e2       	ldi	r20, 0x20	; 32
     d04:	51 e4       	ldi	r21, 0x41	; 65
     d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	bc 01       	movw	r22, r24
     d10:	cd 01       	movw	r24, r26
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	0f c0       	rjmp	.+30     	; 0xd3e <CLCD_voidInit+0x1f8>
     d20:	88 ec       	ldi	r24, 0xC8	; 200
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	9c 83       	std	Y+4, r25	; 0x04
     d26:	8b 83       	std	Y+3, r24	; 0x03
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	f1 f7       	brne	.-4      	; 0xd2c <CLCD_voidInit+0x1e6>
     d30:	9c 83       	std	Y+4, r25	; 0x04
     d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d34:	8d 81       	ldd	r24, Y+5	; 0x05
     d36:	9e 81       	ldd	r25, Y+6	; 0x06
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d3e:	8d 81       	ldd	r24, Y+5	; 0x05
     d40:	9e 81       	ldd	r25, Y+6	; 0x06
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	69 f7       	brne	.-38     	; 0xd20 <CLCD_voidInit+0x1da>
     d46:	14 c0       	rjmp	.+40     	; 0xd70 <CLCD_voidInit+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d48:	6f 81       	ldd	r22, Y+7	; 0x07
     d4a:	78 85       	ldd	r23, Y+8	; 0x08
     d4c:	89 85       	ldd	r24, Y+9	; 0x09
     d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d54:	dc 01       	movw	r26, r24
     d56:	cb 01       	movw	r24, r22
     d58:	9e 83       	std	Y+6, r25	; 0x06
     d5a:	8d 83       	std	Y+5, r24	; 0x05
     d5c:	8d 81       	ldd	r24, Y+5	; 0x05
     d5e:	9e 81       	ldd	r25, Y+6	; 0x06
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	f1 f7       	brne	.-4      	; 0xd68 <CLCD_voidInit+0x222>
     d6c:	9a 83       	std	Y+2, r25	; 0x02
     d6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
     d70:	6c 96       	adiw	r28, 0x1c	; 28
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	cf 91       	pop	r28
     d7e:	df 91       	pop	r29
     d80:	08 95       	ret

00000d82 <CLCD_voidSendCommand>:

void CLCD_voidSendCommand(u8 Copy_u8Command){
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62
     d8a:	2f 97       	sbiw	r28, 0x0f	; 15
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	8f 87       	std	Y+15, r24	; 0x0f

	/*Set RS pin to low for command*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_Low);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
	/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
	/*Set command to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Command);
     dac:	82 e0       	ldi	r24, 0x02	; 2
     dae:	6f 85       	ldd	r22, Y+15	; 0x0f
     db0:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_u8_SetPort_value>
	/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	62 e0       	ldi	r22, 0x02	; 2
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	41 e0       	ldi	r20, 0x01	; 1
     dc4:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	a0 e0       	ldi	r26, 0x00	; 0
     dce:	b0 e4       	ldi	r27, 0x40	; 64
     dd0:	8b 87       	std	Y+11, r24	; 0x0b
     dd2:	9c 87       	std	Y+12, r25	; 0x0c
     dd4:	ad 87       	std	Y+13, r26	; 0x0d
     dd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
     dda:	7c 85       	ldd	r23, Y+12	; 0x0c
     ddc:	8d 85       	ldd	r24, Y+13	; 0x0d
     dde:	9e 85       	ldd	r25, Y+14	; 0x0e
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	4a ef       	ldi	r20, 0xFA	; 250
     de6:	54 e4       	ldi	r21, 0x44	; 68
     de8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	8f 83       	std	Y+7, r24	; 0x07
     df2:	98 87       	std	Y+8, r25	; 0x08
     df4:	a9 87       	std	Y+9, r26	; 0x09
     df6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     df8:	6f 81       	ldd	r22, Y+7	; 0x07
     dfa:	78 85       	ldd	r23, Y+8	; 0x08
     dfc:	89 85       	ldd	r24, Y+9	; 0x09
     dfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e8       	ldi	r20, 0x80	; 128
     e06:	5f e3       	ldi	r21, 0x3F	; 63
     e08:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e0c:	88 23       	and	r24, r24
     e0e:	2c f4       	brge	.+10     	; 0xe1a <CLCD_voidSendCommand+0x98>
		__ticks = 1;
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	9e 83       	std	Y+6, r25	; 0x06
     e16:	8d 83       	std	Y+5, r24	; 0x05
     e18:	3f c0       	rjmp	.+126    	; 0xe98 <CLCD_voidSendCommand+0x116>
	else if (__tmp > 65535)
     e1a:	6f 81       	ldd	r22, Y+7	; 0x07
     e1c:	78 85       	ldd	r23, Y+8	; 0x08
     e1e:	89 85       	ldd	r24, Y+9	; 0x09
     e20:	9a 85       	ldd	r25, Y+10	; 0x0a
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	3f ef       	ldi	r19, 0xFF	; 255
     e26:	4f e7       	ldi	r20, 0x7F	; 127
     e28:	57 e4       	ldi	r21, 0x47	; 71
     e2a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e2e:	18 16       	cp	r1, r24
     e30:	4c f5       	brge	.+82     	; 0xe84 <CLCD_voidSendCommand+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e32:	6b 85       	ldd	r22, Y+11	; 0x0b
     e34:	7c 85       	ldd	r23, Y+12	; 0x0c
     e36:	8d 85       	ldd	r24, Y+13	; 0x0d
     e38:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	40 e2       	ldi	r20, 0x20	; 32
     e40:	51 e4       	ldi	r21, 0x41	; 65
     e42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e46:	dc 01       	movw	r26, r24
     e48:	cb 01       	movw	r24, r22
     e4a:	bc 01       	movw	r22, r24
     e4c:	cd 01       	movw	r24, r26
     e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	9e 83       	std	Y+6, r25	; 0x06
     e58:	8d 83       	std	Y+5, r24	; 0x05
     e5a:	0f c0       	rjmp	.+30     	; 0xe7a <CLCD_voidSendCommand+0xf8>
     e5c:	88 ec       	ldi	r24, 0xC8	; 200
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	9c 83       	std	Y+4, r25	; 0x04
     e62:	8b 83       	std	Y+3, r24	; 0x03
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	9c 81       	ldd	r25, Y+4	; 0x04
     e68:	01 97       	sbiw	r24, 0x01	; 1
     e6a:	f1 f7       	brne	.-4      	; 0xe68 <CLCD_voidSendCommand+0xe6>
     e6c:	9c 83       	std	Y+4, r25	; 0x04
     e6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e70:	8d 81       	ldd	r24, Y+5	; 0x05
     e72:	9e 81       	ldd	r25, Y+6	; 0x06
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	9e 83       	std	Y+6, r25	; 0x06
     e78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e7a:	8d 81       	ldd	r24, Y+5	; 0x05
     e7c:	9e 81       	ldd	r25, Y+6	; 0x06
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	69 f7       	brne	.-38     	; 0xe5c <CLCD_voidSendCommand+0xda>
     e82:	14 c0       	rjmp	.+40     	; 0xeac <CLCD_voidSendCommand+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e84:	6f 81       	ldd	r22, Y+7	; 0x07
     e86:	78 85       	ldd	r23, Y+8	; 0x08
     e88:	89 85       	ldd	r24, Y+9	; 0x09
     e8a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9e 83       	std	Y+6, r25	; 0x06
     e96:	8d 83       	std	Y+5, r24	; 0x05
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <CLCD_voidSendCommand+0x122>
     ea8:	9a 83       	std	Y+2, r25	; 0x02
     eaa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	62 e0       	ldi	r22, 0x02	; 2
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>

}
     eb6:	2f 96       	adiw	r28, 0x0f	; 15
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	de bf       	out	0x3e, r29	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	cd bf       	out	0x3d, r28	; 61
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	08 95       	ret

00000ec8 <CLCD_voidWriteCharctr>:

void CLCD_voidWriteCharctr(u8 Copy_u8Data){
     ec8:	df 93       	push	r29
     eca:	cf 93       	push	r28
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	2f 97       	sbiw	r28, 0x0f	; 15
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS pin to high for data*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RS_PIN,DIO_u8_High);
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	41 e0       	ldi	r20, 0x01	; 1
     ee4:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
		/*Set Rw pin to low for write*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_RW_PIN,DIO_u8_Low);
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
		/*Set Data to data pins*/
	DIO_u8_SetPort_value(CLCD_DATA_PORT,Copy_u8Data);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ef6:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <DIO_u8_SetPort_value>
		/*Set enable pulse*/
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	62 e0       	ldi	r22, 0x02	; 2
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
	DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_High);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	62 e0       	ldi	r22, 0x02	; 2
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
     f0e:	80 e0       	ldi	r24, 0x00	; 0
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	a0 e0       	ldi	r26, 0x00	; 0
     f14:	b0 e4       	ldi	r27, 0x40	; 64
     f16:	8b 87       	std	Y+11, r24	; 0x0b
     f18:	9c 87       	std	Y+12, r25	; 0x0c
     f1a:	ad 87       	std	Y+13, r26	; 0x0d
     f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f20:	7c 85       	ldd	r23, Y+12	; 0x0c
     f22:	8d 85       	ldd	r24, Y+13	; 0x0d
     f24:	9e 85       	ldd	r25, Y+14	; 0x0e
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	4a ef       	ldi	r20, 0xFA	; 250
     f2c:	54 e4       	ldi	r21, 0x44	; 68
     f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f32:	dc 01       	movw	r26, r24
     f34:	cb 01       	movw	r24, r22
     f36:	8f 83       	std	Y+7, r24	; 0x07
     f38:	98 87       	std	Y+8, r25	; 0x08
     f3a:	a9 87       	std	Y+9, r26	; 0x09
     f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f3e:	6f 81       	ldd	r22, Y+7	; 0x07
     f40:	78 85       	ldd	r23, Y+8	; 0x08
     f42:	89 85       	ldd	r24, Y+9	; 0x09
     f44:	9a 85       	ldd	r25, Y+10	; 0x0a
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	5f e3       	ldi	r21, 0x3F	; 63
     f4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f52:	88 23       	and	r24, r24
     f54:	2c f4       	brge	.+10     	; 0xf60 <CLCD_voidWriteCharctr+0x98>
		__ticks = 1;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	9e 83       	std	Y+6, r25	; 0x06
     f5c:	8d 83       	std	Y+5, r24	; 0x05
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <CLCD_voidWriteCharctr+0x116>
	else if (__tmp > 65535)
     f60:	6f 81       	ldd	r22, Y+7	; 0x07
     f62:	78 85       	ldd	r23, Y+8	; 0x08
     f64:	89 85       	ldd	r24, Y+9	; 0x09
     f66:	9a 85       	ldd	r25, Y+10	; 0x0a
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	3f ef       	ldi	r19, 0xFF	; 255
     f6c:	4f e7       	ldi	r20, 0x7F	; 127
     f6e:	57 e4       	ldi	r21, 0x47	; 71
     f70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f74:	18 16       	cp	r1, r24
     f76:	4c f5       	brge	.+82     	; 0xfca <CLCD_voidWriteCharctr+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f78:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e2       	ldi	r20, 0x20	; 32
     f86:	51 e4       	ldi	r21, 0x41	; 65
     f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8c:	dc 01       	movw	r26, r24
     f8e:	cb 01       	movw	r24, r22
     f90:	bc 01       	movw	r22, r24
     f92:	cd 01       	movw	r24, r26
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	0f c0       	rjmp	.+30     	; 0xfc0 <CLCD_voidWriteCharctr+0xf8>
     fa2:	88 ec       	ldi	r24, 0xC8	; 200
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	9c 83       	std	Y+4, r25	; 0x04
     fa8:	8b 83       	std	Y+3, r24	; 0x03
     faa:	8b 81       	ldd	r24, Y+3	; 0x03
     fac:	9c 81       	ldd	r25, Y+4	; 0x04
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <CLCD_voidWriteCharctr+0xe6>
     fb2:	9c 83       	std	Y+4, r25	; 0x04
     fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb6:	8d 81       	ldd	r24, Y+5	; 0x05
     fb8:	9e 81       	ldd	r25, Y+6	; 0x06
     fba:	01 97       	sbiw	r24, 0x01	; 1
     fbc:	9e 83       	std	Y+6, r25	; 0x06
     fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	00 97       	sbiw	r24, 0x00	; 0
     fc6:	69 f7       	brne	.-38     	; 0xfa2 <CLCD_voidWriteCharctr+0xda>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <CLCD_voidWriteCharctr+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fca:	6f 81       	ldd	r22, Y+7	; 0x07
     fcc:	78 85       	ldd	r23, Y+8	; 0x08
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	9e 83       	std	Y+6, r25	; 0x06
     fdc:	8d 83       	std	Y+5, r24	; 0x05
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	89 83       	std	Y+1, r24	; 0x01
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	01 97       	sbiw	r24, 0x01	; 1
     fec:	f1 f7       	brne	.-4      	; 0xfea <CLCD_voidWriteCharctr+0x122>
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_u8_SetPin_value(CLCD_CONTROL_PORT,CLCD_E_PIN,DIO_u8_Low);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	62 e0       	ldi	r22, 0x02	; 2
     ff6:	40 e0       	ldi	r20, 0x00	; 0
     ff8:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
}
     ffc:	2f 96       	adiw	r28, 0x0f	; 15
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	08 95       	ret

0000100e <CLCD_voidWriteString>:

void CLCD_voidWriteString (u8* Copy_pcString)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	00 d0       	rcall	.+0      	; 0x1014 <CLCD_voidWriteString+0x6>
    1014:	0f 92       	push	r0
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    101e:	19 82       	std	Y+1, r1	; 0x01
    1020:	0e c0       	rjmp	.+28     	; 0x103e <CLCD_voidWriteString+0x30>
	while(Copy_pcString[Local_u8Counter]!='\0')
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
    1022:	89 81       	ldd	r24, Y+1	; 0x01
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	9b 81       	ldd	r25, Y+3	; 0x03
    102c:	fc 01       	movw	r30, r24
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	80 81       	ld	r24, Z
    1034:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
		Local_u8Counter++;
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_voidWriteString (u8* Copy_pcString)
{
	u8 Local_u8Counter=0;
	while(Copy_pcString[Local_u8Counter]!='\0')
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	9b 81       	ldd	r25, Y+3	; 0x03
    1048:	fc 01       	movw	r30, r24
    104a:	e2 0f       	add	r30, r18
    104c:	f3 1f       	adc	r31, r19
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	39 f7       	brne	.-50     	; 0x1022 <CLCD_voidWriteString+0x14>
	{
		CLCD_voidWriteCharctr(Copy_pcString[Local_u8Counter]);
		Local_u8Counter++;
	}
}
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <CLCD_Gotoxy>:

void CLCD_Gotoxy (u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <CLCD_Gotoxy+0x6>
    1066:	0f 92       	push	r0
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	8a 83       	std	Y+2, r24	; 0x02
    106e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if (cpy_u8Xpos==0)
    1070:	8a 81       	ldd	r24, Y+2	; 0x02
    1072:	88 23       	and	r24, r24
    1074:	19 f4       	brne	.+6      	; 0x107c <CLCD_Gotoxy+0x1c>
	{
		/*location in first line*/
		Local_u8Address=cpy_u8Ypos;
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <CLCD_Gotoxy+0x28>
	}
	else if (cpy_u8Xpos==1)
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	81 30       	cpi	r24, 0x01	; 1
    1080:	19 f4       	brne	.+6      	; 0x1088 <CLCD_Gotoxy+0x28>
	{
		/*location in second line*/
		Local_u8Address=cpy_u8Ypos+0x40;
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	80 5c       	subi	r24, 0xC0	; 192
    1086:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Set DDRAM Adress 0b10000000=128*/
	CLCD_voidSendCommand(Local_u8Address+128);
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	80 58       	subi	r24, 0x80	; 128
    108c:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>
}
    1090:	0f 90       	pop	r0
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
    1096:	cf 91       	pop	r28
    1098:	df 91       	pop	r29
    109a:	08 95       	ret

0000109c <CLCD_voidWriteOneExtraChar>:

//Store and write only one character in specific position//
void CLCD_voidWriteOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    109c:	df 93       	push	r29
    109e:	cf 93       	push	r28
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	27 97       	sbiw	r28, 0x07	; 7
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	6d 83       	std	Y+5, r22	; 0x05
    10b6:	4e 83       	std	Y+6, r20	; 0x06
    10b8:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    10ba:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    10bc:	8d 81       	ldd	r24, Y+5	; 0x05
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	88 0f       	add	r24, r24
    10cc:	99 1f       	adc	r25, r25
    10ce:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    10d0:	8a 81       	ldd	r24, Y+2	; 0x02
    10d2:	80 5c       	subi	r24, 0xC0	; 192
    10d4:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    10d8:	19 82       	std	Y+1, r1	; 0x01
    10da:	0e c0       	rjmp	.+28     	; 0x10f8 <CLCD_voidWriteOneExtraChar+0x5c>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	fc 01       	movw	r30, r24
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	80 81       	ld	r24, Z
    10ee:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	89 30       	cpi	r24, 0x09	; 9
    10fc:	78 f3       	brcs	.-34     	; 0x10dc <CLCD_voidWriteOneExtraChar+0x40>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    10fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1100:	6f 81       	ldd	r22, Y+7	; 0x07
    1102:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
    1106:	8d 81       	ldd	r24, Y+5	; 0x05
    1108:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
}
    110c:	27 96       	adiw	r28, 0x07	; 7
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	cf 91       	pop	r28
    111a:	df 91       	pop	r29
    111c:	08 95       	ret

0000111e <CLCD_voidWriteExtraChar>:

//Store and write many characters//
//ExtraChar_No-> Many characters will be store (one char or 2 or ...8 characters) then written
void CLCD_voidWriteExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_No,u8 cpy_u8Xpos,u8 cpy_u8Ypos)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	00 d0       	rcall	.+0      	; 0x1124 <CLCD_voidWriteExtraChar+0x6>
    1124:	00 d0       	rcall	.+0      	; 0x1126 <CLCD_voidWriteExtraChar+0x8>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <CLCD_voidWriteExtraChar+0xa>
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	9b 83       	std	Y+3, r25	; 0x03
    112e:	8a 83       	std	Y+2, r24	; 0x02
    1130:	6c 83       	std	Y+4, r22	; 0x04
    1132:	4d 83       	std	Y+5, r20	; 0x05
    1134:	2e 83       	std	Y+6, r18	; 0x06
	u8 Local_u8Iterator;

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);
    1136:	80 e4       	ldi	r24, 0x40	; 64
    1138:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    113c:	19 82       	std	Y+1, r1	; 0x01
    113e:	0e c0       	rjmp	.+28     	; 0x115c <CLCD_voidWriteExtraChar+0x3e>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	9b 81       	ldd	r25, Y+3	; 0x03
    114a:	fc 01       	movw	r30, r24
    114c:	e2 0f       	add	r30, r18
    114e:	f3 1f       	adc	r31, r19
    1150:	80 81       	ld	r24, Z
    1152:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<(cpy_ExtraChar_No*8);Local_u8Iterator++)
    1156:	89 81       	ldd	r24, Y+1	; 0x01
    1158:	8f 5f       	subi	r24, 0xFF	; 255
    115a:	89 83       	std	Y+1, r24	; 0x01
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	8c 81       	ldd	r24, Y+4	; 0x04
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	88 0f       	add	r24, r24
    116e:	99 1f       	adc	r25, r25
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	28 17       	cp	r18, r24
    1176:	39 07       	cpc	r19, r25
    1178:	1c f3       	brlt	.-58     	; 0x1140 <CLCD_voidWriteExtraChar+0x22>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(cpy_u8Xpos,cpy_u8Ypos);
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	6e 81       	ldd	r22, Y+6	; 0x06
    117e:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_Gotoxy>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	06 c0       	rjmp	.+12     	; 0x1192 <CLCD_voidWriteExtraChar+0x74>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>

	//For arabic to write from right to left
	//CLCD_voidSendCommand(lcd_EntryMode_Decr);

	//Display the pattern written in the CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<cpy_ExtraChar_No;Local_u8Iterator++)
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	8f 5f       	subi	r24, 0xFF	; 255
    1190:	89 83       	std	Y+1, r24	; 0x01
    1192:	99 81       	ldd	r25, Y+1	; 0x01
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	98 17       	cp	r25, r24
    1198:	b0 f3       	brcs	.-20     	; 0x1186 <CLCD_voidWriteExtraChar+0x68>
		{
			CLCD_voidWriteCharctr(Local_u8Iterator);
		}
}
    119a:	26 96       	adiw	r28, 0x06	; 6
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	cf 91       	pop	r28
    11a8:	df 91       	pop	r29
    11aa:	08 95       	ret

000011ac <CLCD_voidStoreOneExtraChar>:

//Store only one character without write on screen in specific position//
void CLCD_voidStoreOneExtraChar (u8* cpy_ExtraChar,u8 cpy_ExtraChar_pos)
{
    11ac:	df 93       	push	r29
    11ae:	cf 93       	push	r28
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <CLCD_voidStoreOneExtraChar+0x6>
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <CLCD_voidStoreOneExtraChar+0x8>
    11b4:	0f 92       	push	r0
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	6d 83       	std	Y+5, r22	; 0x05
	u8 local_u8CGRAMAdress=0,Local_u8Iterator;
    11c0:	1a 82       	std	Y+2, r1	; 0x02

	//Calculate the CGRAM Address whose each block is 8 bytes
	local_u8CGRAMAdress=cpy_ExtraChar_pos*8;
    11c2:	8d 81       	ldd	r24, Y+5	; 0x05
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	8a 83       	std	Y+2, r24	; 0x02

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	80 5c       	subi	r24, 0xC0	; 192
    11da:	0e 94 c1 06 	call	0xd82	; 0xd82 <CLCD_voidSendCommand>

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    11de:	19 82       	std	Y+1, r1	; 0x01
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <CLCD_voidStoreOneExtraChar+0x52>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
    11e2:	89 81       	ldd	r24, Y+1	; 0x01
    11e4:	28 2f       	mov	r18, r24
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	fc 01       	movw	r30, r24
    11ee:	e2 0f       	add	r30, r18
    11f0:	f3 1f       	adc	r31, r19
    11f2:	80 81       	ld	r24, Z
    11f4:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>

	//Send CGRAM Address command to LCD, with setting bit 6, clearing bit 7
	CLCD_voidSendCommand(local_u8CGRAMAdress+64);

	//write the pattern into CGRAM
	for (Local_u8Iterator=0;Local_u8Iterator<9;Local_u8Iterator++)
    11f8:	89 81       	ldd	r24, Y+1	; 0x01
    11fa:	8f 5f       	subi	r24, 0xFF	; 255
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	89 30       	cpi	r24, 0x09	; 9
    1202:	78 f3       	brcs	.-34     	; 0x11e2 <CLCD_voidStoreOneExtraChar+0x36>
	{
		CLCD_voidWriteCharctr(cpy_ExtraChar[Local_u8Iterator]);
	}

	//Go back to the DDRAM to display the pattern
	CLCD_Gotoxy(0,0);
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	0e 94 30 08 	call	0x1060	; 0x1060 <CLCD_Gotoxy>

	//Display the pattern written in the CGRAM
	//CLCD_voidWriteCharctr(cpy_ExtraChar_pos);
}
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <CLCD_voidWriteNumber>:

void CLCD_voidWriteNumber(u32 Cpy_Number)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <CLCD_voidWriteNumber+0x6>
    1222:	00 d0       	rcall	.+0      	; 0x1224 <CLCD_voidWriteNumber+0x8>
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	69 83       	std	Y+1, r22	; 0x01
    122a:	7a 83       	std	Y+2, r23	; 0x02
    122c:	8b 83       	std	Y+3, r24	; 0x03
    122e:	9c 83       	std	Y+4, r25	; 0x04
CLCD_voidWriteCharctr((Cpy_Number/1000)+48);
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	ab 81       	ldd	r26, Y+3	; 0x03
    1236:	bc 81       	ldd	r27, Y+4	; 0x04
    1238:	28 ee       	ldi	r18, 0xE8	; 232
    123a:	33 e0       	ldi	r19, 0x03	; 3
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	bc 01       	movw	r22, r24
    1242:	cd 01       	movw	r24, r26
    1244:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    1248:	da 01       	movw	r26, r20
    124a:	c9 01       	movw	r24, r18
    124c:	80 5d       	subi	r24, 0xD0	; 208
    124e:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%1000)/100)+48);
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	ab 81       	ldd	r26, Y+3	; 0x03
    1258:	bc 81       	ldd	r27, Y+4	; 0x04
    125a:	28 ee       	ldi	r18, 0xE8	; 232
    125c:	33 e0       	ldi	r19, 0x03	; 3
    125e:	40 e0       	ldi	r20, 0x00	; 0
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	bc 01       	movw	r22, r24
    1264:	cd 01       	movw	r24, r26
    1266:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	24 e6       	ldi	r18, 0x64	; 100
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	bc 01       	movw	r22, r24
    1278:	cd 01       	movw	r24, r26
    127a:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    127e:	da 01       	movw	r26, r20
    1280:	c9 01       	movw	r24, r18
    1282:	80 5d       	subi	r24, 0xD0	; 208
    1284:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr(((Cpy_Number%100)/10)+48);
    1288:	89 81       	ldd	r24, Y+1	; 0x01
    128a:	9a 81       	ldd	r25, Y+2	; 0x02
    128c:	ab 81       	ldd	r26, Y+3	; 0x03
    128e:	bc 81       	ldd	r27, Y+4	; 0x04
    1290:	24 e6       	ldi	r18, 0x64	; 100
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	2a e0       	ldi	r18, 0x0A	; 10
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
    12ac:	bc 01       	movw	r22, r24
    12ae:	cd 01       	movw	r24, r26
    12b0:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    12b4:	da 01       	movw	r26, r20
    12b6:	c9 01       	movw	r24, r18
    12b8:	80 5d       	subi	r24, 0xD0	; 208
    12ba:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
CLCD_voidWriteCharctr((Cpy_Number%10)+48);
    12be:	89 81       	ldd	r24, Y+1	; 0x01
    12c0:	9a 81       	ldd	r25, Y+2	; 0x02
    12c2:	ab 81       	ldd	r26, Y+3	; 0x03
    12c4:	bc 81       	ldd	r27, Y+4	; 0x04
    12c6:	2a e0       	ldi	r18, 0x0A	; 10
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	bc 01       	movw	r22, r24
    12d0:	cd 01       	movw	r24, r26
    12d2:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <__udivmodsi4>
    12d6:	dc 01       	movw	r26, r24
    12d8:	cb 01       	movw	r24, r22
    12da:	80 5d       	subi	r24, 0xD0	; 208
    12dc:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>
}
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <CLCD_voidWriteOneNumber>:

void CLCD_voidWriteOneNumber(u8 Cpy_OneNumber)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	0f 92       	push	r0
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidWriteCharctr((Cpy_OneNumber%10)+48);
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a e0       	ldi	r25, 0x0A	; 10
    12fe:	69 2f       	mov	r22, r25
    1300:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__udivmodqi4>
    1304:	89 2f       	mov	r24, r25
    1306:	80 5d       	subi	r24, 0xD0	; 208
    1308:	0e 94 64 07 	call	0xec8	; 0xec8 <CLCD_voidWriteCharctr>

}
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <DIO_u8_SetPin_value>:
#include"BIT_CALC.h"
#include"DIO_Private.h"
#include"DIO_Interface.h"

u8 DIO_u8_SetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Val)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	00 d0       	rcall	.+0      	; 0x131a <DIO_u8_SetPin_value+0x6>
    131a:	00 d0       	rcall	.+0      	; 0x131c <DIO_u8_SetPin_value+0x8>
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_u8_SetPin_value+0xa>
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	6a 83       	std	Y+2, r22	; 0x02
    1326:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	88 30       	cpi	r24, 0x08	; 8
    132c:	08 f0       	brcs	.+2      	; 0x1330 <DIO_u8_SetPin_value+0x1c>
    132e:	e0 c0       	rjmp	.+448    	; 0x14f0 <DIO_u8_SetPin_value+0x1dc>

		if( (Copy_u8_Pin_Val == DIO_u8_Low) || (Copy_u8_Pin_Val == DIO_u8_High) ){
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	88 23       	and	r24, r24
    1334:	21 f0       	breq	.+8      	; 0x133e <DIO_u8_SetPin_value+0x2a>
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	09 f0       	breq	.+2      	; 0x133e <DIO_u8_SetPin_value+0x2a>
    133c:	d7 c0       	rjmp	.+430    	; 0x14ec <DIO_u8_SetPin_value+0x1d8>

			switch(Copy_u8_PortID){
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	3e 83       	std	Y+6, r19	; 0x06
    1346:	2d 83       	std	Y+5, r18	; 0x05
    1348:	8d 81       	ldd	r24, Y+5	; 0x05
    134a:	9e 81       	ldd	r25, Y+6	; 0x06
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <DIO_u8_SetPin_value+0x40>
    1352:	43 c0       	rjmp	.+134    	; 0x13da <DIO_u8_SetPin_value+0xc6>
    1354:	2d 81       	ldd	r18, Y+5	; 0x05
    1356:	3e 81       	ldd	r19, Y+6	; 0x06
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <DIO_u8_SetPin_value+0x54>
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <DIO_u8_SetPin_value+0x6e>
    1366:	bd c0       	rjmp	.+378    	; 0x14e2 <DIO_u8_SetPin_value+0x1ce>
    1368:	2d 81       	ldd	r18, Y+5	; 0x05
    136a:	3e 81       	ldd	r19, Y+6	; 0x06
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_u8_SetPin_value+0x60>
    1372:	5f c0       	rjmp	.+190    	; 0x1432 <DIO_u8_SetPin_value+0x11e>
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_u8_SetPin_value+0x6c>
    137e:	85 c0       	rjmp	.+266    	; 0x148a <DIO_u8_SetPin_value+0x176>
    1380:	b0 c0       	rjmp	.+352    	; 0x14e2 <DIO_u8_SetPin_value+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_PORTA, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	81 30       	cpi	r24, 0x01	; 1
    1386:	a1 f4       	brne	.+40     	; 0x13b0 <DIO_u8_SetPin_value+0x9c>
    1388:	ab e3       	ldi	r26, 0x3B	; 59
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	eb e3       	ldi	r30, 0x3B	; 59
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8a 81       	ldd	r24, Y+2	; 0x02
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_u8_SetPin_value+0x92>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_u8_SetPin_value+0x8e>
    13aa:	84 2b       	or	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	9b c0       	rjmp	.+310    	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
    13b0:	ab e3       	ldi	r26, 0x3B	; 59
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	eb e3       	ldi	r30, 0x3B	; 59
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	02 2e       	mov	r0, r18
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <DIO_u8_SetPin_value+0xba>
    13ca:	88 0f       	add	r24, r24
    13cc:	99 1f       	adc	r25, r25
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <DIO_u8_SetPin_value+0xb6>
    13d2:	80 95       	com	r24
    13d4:	84 23       	and	r24, r20
    13d6:	8c 93       	st	X, r24
    13d8:	86 c0       	rjmp	.+268    	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_PORTB, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	81 30       	cpi	r24, 0x01	; 1
    13de:	a1 f4       	brne	.+40     	; 0x1408 <DIO_u8_SetPin_value+0xf4>
    13e0:	a8 e3       	ldi	r26, 0x38	; 56
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e8 e3       	ldi	r30, 0x38	; 56
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	48 2f       	mov	r20, r24
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_u8_SetPin_value+0xea>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_u8_SetPin_value+0xe6>
    1402:	84 2b       	or	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	6f c0       	rjmp	.+222    	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
    1408:	a8 e3       	ldi	r26, 0x38	; 56
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e8 e3       	ldi	r30, 0x38	; 56
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8_SetPin_value+0x112>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8_SetPin_value+0x10e>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	5a c0       	rjmp	.+180    	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_PORTC, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	81 30       	cpi	r24, 0x01	; 1
    1436:	a1 f4       	brne	.+40     	; 0x1460 <DIO_u8_SetPin_value+0x14c>
    1438:	a5 e3       	ldi	r26, 0x35	; 53
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e5 e3       	ldi	r30, 0x35	; 53
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	48 2f       	mov	r20, r24
    1444:	8a 81       	ldd	r24, Y+2	; 0x02
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	02 2e       	mov	r0, r18
    1450:	02 c0       	rjmp	.+4      	; 0x1456 <DIO_u8_SetPin_value+0x142>
    1452:	88 0f       	add	r24, r24
    1454:	99 1f       	adc	r25, r25
    1456:	0a 94       	dec	r0
    1458:	e2 f7       	brpl	.-8      	; 0x1452 <DIO_u8_SetPin_value+0x13e>
    145a:	84 2b       	or	r24, r20
    145c:	8c 93       	st	X, r24
    145e:	43 c0       	rjmp	.+134    	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
    1460:	a5 e3       	ldi	r26, 0x35	; 53
    1462:	b0 e0       	ldi	r27, 0x00	; 0
    1464:	e5 e3       	ldi	r30, 0x35	; 53
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	48 2f       	mov	r20, r24
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	02 2e       	mov	r0, r18
    1478:	02 c0       	rjmp	.+4      	; 0x147e <DIO_u8_SetPin_value+0x16a>
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	0a 94       	dec	r0
    1480:	e2 f7       	brpl	.-8      	; 0x147a <DIO_u8_SetPin_value+0x166>
    1482:	80 95       	com	r24
    1484:	84 23       	and	r24, r20
    1486:	8c 93       	st	X, r24
    1488:	2e c0       	rjmp	.+92     	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_PORTD, Copy_u8_Pin_ID, Copy_u8_Pin_Val);
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	a1 f4       	brne	.+40     	; 0x14b8 <DIO_u8_SetPin_value+0x1a4>
    1490:	a2 e3       	ldi	r26, 0x32	; 50
    1492:	b0 e0       	ldi	r27, 0x00	; 0
    1494:	e2 e3       	ldi	r30, 0x32	; 50
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	48 2f       	mov	r20, r24
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	02 2e       	mov	r0, r18
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <DIO_u8_SetPin_value+0x19a>
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	0a 94       	dec	r0
    14b0:	e2 f7       	brpl	.-8      	; 0x14aa <DIO_u8_SetPin_value+0x196>
    14b2:	84 2b       	or	r24, r20
    14b4:	8c 93       	st	X, r24
    14b6:	17 c0       	rjmp	.+46     	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
    14b8:	a2 e3       	ldi	r26, 0x32	; 50
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	e2 e3       	ldi	r30, 0x32	; 50
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	80 81       	ld	r24, Z
    14c2:	48 2f       	mov	r20, r24
    14c4:	8a 81       	ldd	r24, Y+2	; 0x02
    14c6:	28 2f       	mov	r18, r24
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	02 2e       	mov	r0, r18
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <DIO_u8_SetPin_value+0x1c2>
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	0a 94       	dec	r0
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <DIO_u8_SetPin_value+0x1be>
    14da:	80 95       	com	r24
    14dc:	84 23       	and	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_u8_SetPin_value+0x1d2>
			break;

			default: return Invalid_u8_Error ;
    14e2:	1c 82       	std	Y+4, r1	; 0x04
    14e4:	06 c0       	rjmp	.+12     	; 0x14f2 <DIO_u8_SetPin_value+0x1de>
			}
		}else
             return Invalid_u8_Error ;
	}else
         return Invalid_u8_Error ;
	return Valid;
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	03 c0       	rjmp	.+6      	; 0x14f2 <DIO_u8_SetPin_value+0x1de>
			break;

			default: return Invalid_u8_Error ;
			}
		}else
             return Invalid_u8_Error ;
    14ec:	1c 82       	std	Y+4, r1	; 0x04
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <DIO_u8_SetPin_value+0x1de>
	}else
         return Invalid_u8_Error ;
    14f0:	1c 82       	std	Y+4, r1	; 0x04
    14f2:	8c 81       	ldd	r24, Y+4	; 0x04
	return Valid;
}
    14f4:	26 96       	adiw	r28, 0x06	; 6
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	08 95       	ret

00001506 <DIO_u8_SetPin_Dir>:
u8 DIO_u8_SetPin_Dir(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID,u8 Copy_u8_Pin_Dir)
{
    1506:	df 93       	push	r29
    1508:	cf 93       	push	r28
    150a:	00 d0       	rcall	.+0      	; 0x150c <DIO_u8_SetPin_Dir+0x6>
    150c:	00 d0       	rcall	.+0      	; 0x150e <DIO_u8_SetPin_Dir+0x8>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <DIO_u8_SetPin_Dir+0xa>
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	6a 83       	std	Y+2, r22	; 0x02
    1518:	4b 83       	std	Y+3, r20	; 0x03

	if( (Copy_u8_Pin_ID >= 0) && (Copy_u8_Pin_ID <= 7) ){
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	88 30       	cpi	r24, 0x08	; 8
    151e:	08 f0       	brcs	.+2      	; 0x1522 <DIO_u8_SetPin_Dir+0x1c>
    1520:	e0 c0       	rjmp	.+448    	; 0x16e2 <DIO_u8_SetPin_Dir+0x1dc>

		if((Copy_u8_Pin_Dir == DIO_u8_Input) || (Copy_u8_Pin_Dir == DIO_u8_Output)){
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	88 23       	and	r24, r24
    1526:	21 f0       	breq	.+8      	; 0x1530 <DIO_u8_SetPin_Dir+0x2a>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <DIO_u8_SetPin_Dir+0x2a>
    152e:	d7 c0       	rjmp	.+430    	; 0x16de <DIO_u8_SetPin_Dir+0x1d8>

			switch(Copy_u8_PortID){
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3e 83       	std	Y+6, r19	; 0x06
    1538:	2d 83       	std	Y+5, r18	; 0x05
    153a:	8d 81       	ldd	r24, Y+5	; 0x05
    153c:	9e 81       	ldd	r25, Y+6	; 0x06
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <DIO_u8_SetPin_Dir+0x40>
    1544:	43 c0       	rjmp	.+134    	; 0x15cc <DIO_u8_SetPin_Dir+0xc6>
    1546:	2d 81       	ldd	r18, Y+5	; 0x05
    1548:	3e 81       	ldd	r19, Y+6	; 0x06
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	2c f4       	brge	.+10     	; 0x155a <DIO_u8_SetPin_Dir+0x54>
    1550:	8d 81       	ldd	r24, Y+5	; 0x05
    1552:	9e 81       	ldd	r25, Y+6	; 0x06
    1554:	00 97       	sbiw	r24, 0x00	; 0
    1556:	71 f0       	breq	.+28     	; 0x1574 <DIO_u8_SetPin_Dir+0x6e>
    1558:	bd c0       	rjmp	.+378    	; 0x16d4 <DIO_u8_SetPin_Dir+0x1ce>
    155a:	2d 81       	ldd	r18, Y+5	; 0x05
    155c:	3e 81       	ldd	r19, Y+6	; 0x06
    155e:	22 30       	cpi	r18, 0x02	; 2
    1560:	31 05       	cpc	r19, r1
    1562:	09 f4       	brne	.+2      	; 0x1566 <DIO_u8_SetPin_Dir+0x60>
    1564:	5f c0       	rjmp	.+190    	; 0x1624 <DIO_u8_SetPin_Dir+0x11e>
    1566:	8d 81       	ldd	r24, Y+5	; 0x05
    1568:	9e 81       	ldd	r25, Y+6	; 0x06
    156a:	83 30       	cpi	r24, 0x03	; 3
    156c:	91 05       	cpc	r25, r1
    156e:	09 f4       	brne	.+2      	; 0x1572 <DIO_u8_SetPin_Dir+0x6c>
    1570:	85 c0       	rjmp	.+266    	; 0x167c <DIO_u8_SetPin_Dir+0x176>
    1572:	b0 c0       	rjmp	.+352    	; 0x16d4 <DIO_u8_SetPin_Dir+0x1ce>

			case Group_A:
				ASSIGN_Bit(DIO_u8_DDRA, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	81 30       	cpi	r24, 0x01	; 1
    1578:	a1 f4       	brne	.+40     	; 0x15a2 <DIO_u8_SetPin_Dir+0x9c>
    157a:	aa e3       	ldi	r26, 0x3A	; 58
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	ea e3       	ldi	r30, 0x3A	; 58
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_u8_SetPin_Dir+0x92>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_u8_SetPin_Dir+0x8e>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	9b c0       	rjmp	.+310    	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
    15a2:	aa e3       	ldi	r26, 0x3A	; 58
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ea e3       	ldi	r30, 0x3A	; 58
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <DIO_u8_SetPin_Dir+0xba>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <DIO_u8_SetPin_Dir+0xb6>
    15c4:	80 95       	com	r24
    15c6:	84 23       	and	r24, r20
    15c8:	8c 93       	st	X, r24
    15ca:	86 c0       	rjmp	.+268    	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_B:
				ASSIGN_Bit(DIO_u8_DDRB, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	a1 f4       	brne	.+40     	; 0x15fa <DIO_u8_SetPin_Dir+0xf4>
    15d2:	a7 e3       	ldi	r26, 0x37	; 55
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e7 e3       	ldi	r30, 0x37	; 55
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_u8_SetPin_Dir+0xea>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_u8_SetPin_Dir+0xe6>
    15f4:	84 2b       	or	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	6f c0       	rjmp	.+222    	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
    15fa:	a7 e3       	ldi	r26, 0x37	; 55
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	80 81       	ld	r24, Z
    1604:	48 2f       	mov	r20, r24
    1606:	8a 81       	ldd	r24, Y+2	; 0x02
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	81 e0       	ldi	r24, 0x01	; 1
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	02 2e       	mov	r0, r18
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <DIO_u8_SetPin_Dir+0x112>
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	0a 94       	dec	r0
    161a:	e2 f7       	brpl	.-8      	; 0x1614 <DIO_u8_SetPin_Dir+0x10e>
    161c:	80 95       	com	r24
    161e:	84 23       	and	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	5a c0       	rjmp	.+180    	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_C:
				ASSIGN_Bit(DIO_u8_DDRC, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	81 30       	cpi	r24, 0x01	; 1
    1628:	a1 f4       	brne	.+40     	; 0x1652 <DIO_u8_SetPin_Dir+0x14c>
    162a:	a4 e3       	ldi	r26, 0x34	; 52
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	e4 e3       	ldi	r30, 0x34	; 52
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	48 2f       	mov	r20, r24
    1636:	8a 81       	ldd	r24, Y+2	; 0x02
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	02 2e       	mov	r0, r18
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <DIO_u8_SetPin_Dir+0x142>
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	0a 94       	dec	r0
    164a:	e2 f7       	brpl	.-8      	; 0x1644 <DIO_u8_SetPin_Dir+0x13e>
    164c:	84 2b       	or	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	43 c0       	rjmp	.+134    	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
    1652:	a4 e3       	ldi	r26, 0x34	; 52
    1654:	b0 e0       	ldi	r27, 0x00	; 0
    1656:	e4 e3       	ldi	r30, 0x34	; 52
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	48 2f       	mov	r20, r24
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 2e       	mov	r0, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <DIO_u8_SetPin_Dir+0x16a>
    166c:	88 0f       	add	r24, r24
    166e:	99 1f       	adc	r25, r25
    1670:	0a 94       	dec	r0
    1672:	e2 f7       	brpl	.-8      	; 0x166c <DIO_u8_SetPin_Dir+0x166>
    1674:	80 95       	com	r24
    1676:	84 23       	and	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	2e c0       	rjmp	.+92     	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
				break;

			case Group_D:
			ASSIGN_Bit(DIO_u8_DDRD, Copy_u8_Pin_ID, Copy_u8_Pin_Dir);
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	81 30       	cpi	r24, 0x01	; 1
    1680:	a1 f4       	brne	.+40     	; 0x16aa <DIO_u8_SetPin_Dir+0x1a4>
    1682:	a1 e3       	ldi	r26, 0x31	; 49
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e1 e3       	ldi	r30, 0x31	; 49
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8a 81       	ldd	r24, Y+2	; 0x02
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 2e       	mov	r0, r18
    169a:	02 c0       	rjmp	.+4      	; 0x16a0 <DIO_u8_SetPin_Dir+0x19a>
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	0a 94       	dec	r0
    16a2:	e2 f7       	brpl	.-8      	; 0x169c <DIO_u8_SetPin_Dir+0x196>
    16a4:	84 2b       	or	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	17 c0       	rjmp	.+46     	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
    16aa:	a1 e3       	ldi	r26, 0x31	; 49
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e1 e3       	ldi	r30, 0x31	; 49
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_u8_SetPin_Dir+0x1c2>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_u8_SetPin_Dir+0x1be>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_u8_SetPin_Dir+0x1d2>
			break;

			default: return Invalid_u8_Error;
    16d4:	1c 82       	std	Y+4, r1	; 0x04
    16d6:	06 c0       	rjmp	.+12     	; 0x16e4 <DIO_u8_SetPin_Dir+0x1de>
		}else
			return Invalid_u8_Error;
	}else
		return Invalid_u8_Error;

	return Valid;
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	03 c0       	rjmp	.+6      	; 0x16e4 <DIO_u8_SetPin_Dir+0x1de>
			break;

			default: return Invalid_u8_Error;
			}
		}else
			return Invalid_u8_Error;
    16de:	1c 82       	std	Y+4, r1	; 0x04
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <DIO_u8_SetPin_Dir+0x1de>
	}else
		return Invalid_u8_Error;
    16e2:	1c 82       	std	Y+4, r1	; 0x04
    16e4:	8c 81       	ldd	r24, Y+4	; 0x04

	return Valid;
}
    16e6:	26 96       	adiw	r28, 0x06	; 6
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <DIO_u8_SetPort_value>:

u8 DIO_u8_SetPort_value(u8 Copy_u8_PortID, u8 Copy_u8_Port_Val)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	00 d0       	rcall	.+0      	; 0x16fe <DIO_u8_SetPort_value+0x6>
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <DIO_u8_SetPort_value+0x8>
    1700:	0f 92       	push	r0
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	3d 83       	std	Y+5, r19	; 0x05
    1712:	2c 83       	std	Y+4, r18	; 0x04
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
    171c:	d1 f0       	breq	.+52     	; 0x1752 <DIO_u8_SetPort_value+0x5a>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <DIO_u8_SetPort_value+0x3a>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 f0       	breq	.+24     	; 0x1748 <DIO_u8_SetPort_value+0x50>
    1730:	1f c0       	rjmp	.+62     	; 0x1770 <DIO_u8_SetPort_value+0x78>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <DIO_u8_SetPort_value+0x64>
    173c:	8c 81       	ldd	r24, Y+4	; 0x04
    173e:	9d 81       	ldd	r25, Y+5	; 0x05
    1740:	83 30       	cpi	r24, 0x03	; 3
    1742:	91 05       	cpc	r25, r1
    1744:	81 f0       	breq	.+32     	; 0x1766 <DIO_u8_SetPort_value+0x6e>
    1746:	14 c0       	rjmp	.+40     	; 0x1770 <DIO_u8_SetPort_value+0x78>
	{
	case Group_A: DIO_u8_PORTA = Copy_u8_Port_Val;
    1748:	eb e3       	ldi	r30, 0x3B	; 59
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	80 83       	st	Z, r24
    1750:	11 c0       	rjmp	.+34     	; 0x1774 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_B: DIO_u8_PORTB = Copy_u8_Port_Val;
    1752:	e8 e3       	ldi	r30, 0x38	; 56
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	80 83       	st	Z, r24
    175a:	0c c0       	rjmp	.+24     	; 0x1774 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_C: DIO_u8_PORTC = Copy_u8_Port_Val;
    175c:	e5 e3       	ldi	r30, 0x35	; 53
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	80 83       	st	Z, r24
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <DIO_u8_SetPort_value+0x7c>
			break;
	case Group_D: DIO_u8_PORTD = Copy_u8_Port_Val;
    1766:	e2 e3       	ldi	r30, 0x32	; 50
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	80 83       	st	Z, r24
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_u8_SetPort_value+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1770:	1b 82       	std	Y+3, r1	; 0x03
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_u8_SetPort_value+0x80>
	}
	return Valid;
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	9b 83       	std	Y+3, r25	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
}
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	cf 91       	pop	r28
    1786:	df 91       	pop	r29
    1788:	08 95       	ret

0000178a <DIO_u8_SetPort_Dir>:

u8 DIO_u8_SetPort_Dir(u8 Copy_u8_PortID, u8 Copy_u8_Port_Dir)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	00 d0       	rcall	.+0      	; 0x1790 <DIO_u8_SetPort_Dir+0x6>
    1790:	00 d0       	rcall	.+0      	; 0x1792 <DIO_u8_SetPort_Dir+0x8>
    1792:	0f 92       	push	r0
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	3d 83       	std	Y+5, r19	; 0x05
    17a4:	2c 83       	std	Y+4, r18	; 0x04
    17a6:	8c 81       	ldd	r24, Y+4	; 0x04
    17a8:	9d 81       	ldd	r25, Y+5	; 0x05
    17aa:	81 30       	cpi	r24, 0x01	; 1
    17ac:	91 05       	cpc	r25, r1
    17ae:	d1 f0       	breq	.+52     	; 0x17e4 <DIO_u8_SetPort_Dir+0x5a>
    17b0:	2c 81       	ldd	r18, Y+4	; 0x04
    17b2:	3d 81       	ldd	r19, Y+5	; 0x05
    17b4:	22 30       	cpi	r18, 0x02	; 2
    17b6:	31 05       	cpc	r19, r1
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <DIO_u8_SetPort_Dir+0x3a>
    17ba:	8c 81       	ldd	r24, Y+4	; 0x04
    17bc:	9d 81       	ldd	r25, Y+5	; 0x05
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	61 f0       	breq	.+24     	; 0x17da <DIO_u8_SetPort_Dir+0x50>
    17c2:	1f c0       	rjmp	.+62     	; 0x1802 <DIO_u8_SetPort_Dir+0x78>
    17c4:	2c 81       	ldd	r18, Y+4	; 0x04
    17c6:	3d 81       	ldd	r19, Y+5	; 0x05
    17c8:	22 30       	cpi	r18, 0x02	; 2
    17ca:	31 05       	cpc	r19, r1
    17cc:	81 f0       	breq	.+32     	; 0x17ee <DIO_u8_SetPort_Dir+0x64>
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	9d 81       	ldd	r25, Y+5	; 0x05
    17d2:	83 30       	cpi	r24, 0x03	; 3
    17d4:	91 05       	cpc	r25, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <DIO_u8_SetPort_Dir+0x6e>
    17d8:	14 c0       	rjmp	.+40     	; 0x1802 <DIO_u8_SetPort_Dir+0x78>
	{
	case Group_A: DIO_u8_DDRA = Copy_u8_Port_Dir;
    17da:	ea e3       	ldi	r30, 0x3A	; 58
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	80 83       	st	Z, r24
    17e2:	11 c0       	rjmp	.+34     	; 0x1806 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_B: DIO_u8_DDRB = Copy_u8_Port_Dir;
    17e4:	e7 e3       	ldi	r30, 0x37	; 55
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	80 83       	st	Z, r24
    17ec:	0c c0       	rjmp	.+24     	; 0x1806 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_C: DIO_u8_DDRC = Copy_u8_Port_Dir;
    17ee:	e4 e3       	ldi	r30, 0x34	; 52
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	80 83       	st	Z, r24
    17f6:	07 c0       	rjmp	.+14     	; 0x1806 <DIO_u8_SetPort_Dir+0x7c>
			break;
	case Group_D: DIO_u8_DDRD = Copy_u8_Port_Dir;
    17f8:	e1 e3       	ldi	r30, 0x31	; 49
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	80 83       	st	Z, r24
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <DIO_u8_SetPort_Dir+0x7c>
			break;
	default: return Invalid_u8_Error ;
    1802:	1b 82       	std	Y+3, r1	; 0x03
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_u8_SetPort_Dir+0x80>
	}

	return Valid;
    1806:	91 e0       	ldi	r25, 0x01	; 1
    1808:	9b 83       	std	Y+3, r25	; 0x03
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <DIO_u8_GetPin_value>:

u8 DIO_u8_GetPin_value(u8 Copy_u8_PortID,u8 Copy_u8_Pin_ID, u8 *Copy_Pu8_u8_Pin_Val)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	27 97       	sbiw	r28, 0x07	; 7
    1826:	0f b6       	in	r0, 0x3f	; 63
    1828:	f8 94       	cli
    182a:	de bf       	out	0x3e, r29	; 62
    182c:	0f be       	out	0x3f, r0	; 63
    182e:	cd bf       	out	0x3d, r28	; 61
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	6a 83       	std	Y+2, r22	; 0x02
    1834:	5c 83       	std	Y+4, r21	; 0x04
    1836:	4b 83       	std	Y+3, r20	; 0x03
	switch(Copy_u8_PortID)
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3f 83       	std	Y+7, r19	; 0x07
    1840:	2e 83       	std	Y+6, r18	; 0x06
    1842:	4e 81       	ldd	r20, Y+6	; 0x06
    1844:	5f 81       	ldd	r21, Y+7	; 0x07
    1846:	41 30       	cpi	r20, 0x01	; 1
    1848:	51 05       	cpc	r21, r1
    184a:	59 f1       	breq	.+86     	; 0x18a2 <DIO_u8_GetPin_value+0x86>
    184c:	8e 81       	ldd	r24, Y+6	; 0x06
    184e:	9f 81       	ldd	r25, Y+7	; 0x07
    1850:	82 30       	cpi	r24, 0x02	; 2
    1852:	91 05       	cpc	r25, r1
    1854:	34 f4       	brge	.+12     	; 0x1862 <DIO_u8_GetPin_value+0x46>
    1856:	2e 81       	ldd	r18, Y+6	; 0x06
    1858:	3f 81       	ldd	r19, Y+7	; 0x07
    185a:	21 15       	cp	r18, r1
    185c:	31 05       	cpc	r19, r1
    185e:	69 f0       	breq	.+26     	; 0x187a <DIO_u8_GetPin_value+0x5e>
    1860:	5c c0       	rjmp	.+184    	; 0x191a <DIO_u8_GetPin_value+0xfe>
    1862:	4e 81       	ldd	r20, Y+6	; 0x06
    1864:	5f 81       	ldd	r21, Y+7	; 0x07
    1866:	42 30       	cpi	r20, 0x02	; 2
    1868:	51 05       	cpc	r21, r1
    186a:	79 f1       	breq	.+94     	; 0x18ca <DIO_u8_GetPin_value+0xae>
    186c:	8e 81       	ldd	r24, Y+6	; 0x06
    186e:	9f 81       	ldd	r25, Y+7	; 0x07
    1870:	83 30       	cpi	r24, 0x03	; 3
    1872:	91 05       	cpc	r25, r1
    1874:	09 f4       	brne	.+2      	; 0x1878 <DIO_u8_GetPin_value+0x5c>
    1876:	3d c0       	rjmp	.+122    	; 0x18f2 <DIO_u8_GetPin_value+0xd6>
    1878:	50 c0       	rjmp	.+160    	; 0x191a <DIO_u8_GetPin_value+0xfe>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINA,Copy_u8_Pin_ID);
    187a:	e9 e3       	ldi	r30, 0x39	; 57
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	88 2f       	mov	r24, r24
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a9 01       	movw	r20, r18
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <DIO_u8_GetPin_value+0x76>
    188e:	55 95       	asr	r21
    1890:	47 95       	ror	r20
    1892:	8a 95       	dec	r24
    1894:	e2 f7       	brpl	.-8      	; 0x188e <DIO_u8_GetPin_value+0x72>
    1896:	ca 01       	movw	r24, r20
    1898:	81 70       	andi	r24, 0x01	; 1
    189a:	eb 81       	ldd	r30, Y+3	; 0x03
    189c:	fc 81       	ldd	r31, Y+4	; 0x04
    189e:	80 83       	st	Z, r24
    18a0:	3e c0       	rjmp	.+124    	; 0x191e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINB,Copy_u8_Pin_ID);
    18a2:	e6 e3       	ldi	r30, 0x36	; 54
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <DIO_u8_GetPin_value+0x9e>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <DIO_u8_GetPin_value+0x9a>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	eb 81       	ldd	r30, Y+3	; 0x03
    18c4:	fc 81       	ldd	r31, Y+4	; 0x04
    18c6:	80 83       	st	Z, r24
    18c8:	2a c0       	rjmp	.+84     	; 0x191e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PINC,Copy_u8_Pin_ID);
    18ca:	e3 e3       	ldi	r30, 0x33	; 51
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	88 2f       	mov	r24, r24
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	a9 01       	movw	r20, r18
    18dc:	02 c0       	rjmp	.+4      	; 0x18e2 <DIO_u8_GetPin_value+0xc6>
    18de:	55 95       	asr	r21
    18e0:	47 95       	ror	r20
    18e2:	8a 95       	dec	r24
    18e4:	e2 f7       	brpl	.-8      	; 0x18de <DIO_u8_GetPin_value+0xc2>
    18e6:	ca 01       	movw	r24, r20
    18e8:	81 70       	andi	r24, 0x01	; 1
    18ea:	eb 81       	ldd	r30, Y+3	; 0x03
    18ec:	fc 81       	ldd	r31, Y+4	; 0x04
    18ee:	80 83       	st	Z, r24
    18f0:	16 c0       	rjmp	.+44     	; 0x191e <DIO_u8_GetPin_value+0x102>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = GET_BIT(DIO_u8_PIND,Copy_u8_Pin_ID);
    18f2:	e0 e3       	ldi	r30, 0x30	; 48
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 2f       	mov	r24, r24
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a9 01       	movw	r20, r18
    1904:	02 c0       	rjmp	.+4      	; 0x190a <DIO_u8_GetPin_value+0xee>
    1906:	55 95       	asr	r21
    1908:	47 95       	ror	r20
    190a:	8a 95       	dec	r24
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <DIO_u8_GetPin_value+0xea>
    190e:	ca 01       	movw	r24, r20
    1910:	81 70       	andi	r24, 0x01	; 1
    1912:	eb 81       	ldd	r30, Y+3	; 0x03
    1914:	fc 81       	ldd	r31, Y+4	; 0x04
    1916:	80 83       	st	Z, r24
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_u8_GetPin_value+0x102>
			break;
	default: return Invalid_u8_Error ;
    191a:	1d 82       	std	Y+5, r1	; 0x05
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <DIO_u8_GetPin_value+0x106>
	}
	return Valid;
    191e:	51 e0       	ldi	r21, 0x01	; 1
    1920:	5d 83       	std	Y+5, r21	; 0x05
    1922:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1924:	27 96       	adiw	r28, 0x07	; 7
    1926:	0f b6       	in	r0, 0x3f	; 63
    1928:	f8 94       	cli
    192a:	de bf       	out	0x3e, r29	; 62
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	cd bf       	out	0x3d, r28	; 61
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <DIO_u8_GetPort_value>:

u8 DIO_u8_GetPort_value(u8 Copy_u8_PortID, u8 *Copy_Pu8_u8_Pin_Val)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <DIO_u8_GetPort_value+0x6>
    193c:	00 d0       	rcall	.+0      	; 0x193e <DIO_u8_GetPort_value+0x8>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <DIO_u8_GetPort_value+0xa>
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	7b 83       	std	Y+3, r23	; 0x03
    1948:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_PortID)
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	3e 83       	std	Y+6, r19	; 0x06
    1952:	2d 83       	std	Y+5, r18	; 0x05
    1954:	8d 81       	ldd	r24, Y+5	; 0x05
    1956:	9e 81       	ldd	r25, Y+6	; 0x06
    1958:	81 30       	cpi	r24, 0x01	; 1
    195a:	91 05       	cpc	r25, r1
    195c:	e1 f0       	breq	.+56     	; 0x1996 <DIO_u8_GetPort_value+0x60>
    195e:	2d 81       	ldd	r18, Y+5	; 0x05
    1960:	3e 81       	ldd	r19, Y+6	; 0x06
    1962:	22 30       	cpi	r18, 0x02	; 2
    1964:	31 05       	cpc	r19, r1
    1966:	2c f4       	brge	.+10     	; 0x1972 <DIO_u8_GetPort_value+0x3c>
    1968:	8d 81       	ldd	r24, Y+5	; 0x05
    196a:	9e 81       	ldd	r25, Y+6	; 0x06
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	61 f0       	breq	.+24     	; 0x1988 <DIO_u8_GetPort_value+0x52>
    1970:	27 c0       	rjmp	.+78     	; 0x19c0 <DIO_u8_GetPort_value+0x8a>
    1972:	2d 81       	ldd	r18, Y+5	; 0x05
    1974:	3e 81       	ldd	r19, Y+6	; 0x06
    1976:	22 30       	cpi	r18, 0x02	; 2
    1978:	31 05       	cpc	r19, r1
    197a:	a1 f0       	breq	.+40     	; 0x19a4 <DIO_u8_GetPort_value+0x6e>
    197c:	8d 81       	ldd	r24, Y+5	; 0x05
    197e:	9e 81       	ldd	r25, Y+6	; 0x06
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	91 05       	cpc	r25, r1
    1984:	b1 f0       	breq	.+44     	; 0x19b2 <DIO_u8_GetPort_value+0x7c>
    1986:	1c c0       	rjmp	.+56     	; 0x19c0 <DIO_u8_GetPort_value+0x8a>
	{
	case Group_A: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTA;
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	ea 81       	ldd	r30, Y+2	; 0x02
    1990:	fb 81       	ldd	r31, Y+3	; 0x03
    1992:	80 83       	st	Z, r24
    1994:	17 c0       	rjmp	.+46     	; 0x19c4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_B: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTB;
    1996:	e8 e3       	ldi	r30, 0x38	; 56
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	ea 81       	ldd	r30, Y+2	; 0x02
    199e:	fb 81       	ldd	r31, Y+3	; 0x03
    19a0:	80 83       	st	Z, r24
    19a2:	10 c0       	rjmp	.+32     	; 0x19c4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_C: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTC;
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	ea 81       	ldd	r30, Y+2	; 0x02
    19ac:	fb 81       	ldd	r31, Y+3	; 0x03
    19ae:	80 83       	st	Z, r24
    19b0:	09 c0       	rjmp	.+18     	; 0x19c4 <DIO_u8_GetPort_value+0x8e>
			break;
	case Group_D: *Copy_Pu8_u8_Pin_Val = DIO_u8_PORTD;
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	ea 81       	ldd	r30, Y+2	; 0x02
    19ba:	fb 81       	ldd	r31, Y+3	; 0x03
    19bc:	80 83       	st	Z, r24
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8_GetPort_value+0x8e>
			break;
	default: return Invalid_u8_Error ;
    19c0:	1c 82       	std	Y+4, r1	; 0x04
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <DIO_u8_GetPort_value+0x92>
	}
	return Valid;
    19c4:	91 e0       	ldi	r25, 0x01	; 1
    19c6:	9c 83       	std	Y+4, r25	; 0x04
    19c8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    19ca:	26 96       	adiw	r28, 0x06	; 6
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	cf 91       	pop	r28
    19d8:	df 91       	pop	r29
    19da:	08 95       	ret

000019dc <KPD_Void_Init>:

u8 Col_index;
u8 Row_index;


void KPD_Void_Init(void){
    19dc:	df 93       	push	r29
    19de:	cf 93       	push	r28
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62

#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB; Col_index++)
    19e4:	10 92 81 00 	sts	0x0081, r1
    19e8:	45 c0       	rjmp	.+138    	; 0x1a74 <KPD_Void_Init+0x98>
	{
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Output);
    19ea:	80 91 81 00 	lds	r24, 0x0081
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	e8 59       	subi	r30, 0x98	; 152
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	90 81       	ld	r25, Z
    19fa:	83 e0       	ldi	r24, 0x03	; 3
    19fc:	69 2f       	mov	r22, r25
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	0e 94 83 0a 	call	0x1506	; 0x1506 <DIO_u8_SetPin_Dir>
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
    1a04:	80 91 81 00 	lds	r24, 0x0081
    1a08:	88 2f       	mov	r24, r24
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	e8 59       	subi	r30, 0x98	; 152
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	90 81       	ld	r25, Z
    1a14:	83 e0       	ldi	r24, 0x03	; 3
    1a16:	69 2f       	mov	r22, r25
    1a18:	41 e0       	ldi	r20, 0x01	; 1
    1a1a:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1a1e:	10 92 80 00 	sts	0x0080, r1
    1a22:	1f c0       	rjmp	.+62     	; 0x1a62 <KPD_Void_Init+0x86>

			DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Row_PINS[Row_index], DIO_u8_Input);
    1a24:	80 91 80 00 	lds	r24, 0x0080
    1a28:	88 2f       	mov	r24, r24
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	e4 59       	subi	r30, 0x94	; 148
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	90 81       	ld	r25, Z
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	69 2f       	mov	r22, r25
    1a38:	40 e0       	ldi	r20, 0x00	; 0
    1a3a:	0e 94 83 0a 	call	0x1506	; 0x1506 <DIO_u8_SetPin_Dir>
			DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], DIO_u8_High);
    1a3e:	80 91 80 00 	lds	r24, 0x0080
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	e4 59       	subi	r30, 0x94	; 148
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	90 81       	ld	r25, Z
    1a4e:	83 e0       	ldi	r24, 0x03	; 3
    1a50:	69 2f       	mov	r22, r25
    1a52:	41 e0       	ldi	r20, 0x01	; 1
    1a54:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		DIO_u8_SetPin_Dir(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Output);
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1a58:	80 91 80 00 	lds	r24, 0x0080
    1a5c:	8f 5f       	subi	r24, 0xFF	; 255
    1a5e:	80 93 80 00 	sts	0x0080, r24
    1a62:	80 91 80 00 	lds	r24, 0x0080
    1a66:	84 30       	cpi	r24, 0x04	; 4
    1a68:	e8 f2       	brcs	.-70     	; 0x1a24 <KPD_Void_Init+0x48>

void KPD_Void_Init(void){

#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB; Col_index++)
    1a6a:	80 91 81 00 	lds	r24, 0x0081
    1a6e:	8f 5f       	subi	r24, 0xFF	; 255
    1a70:	80 93 81 00 	sts	0x0081, r24
    1a74:	80 91 81 00 	lds	r24, 0x0081
    1a78:	84 30       	cpi	r24, 0x04	; 4
    1a7a:	08 f4       	brcc	.+2      	; 0x1a7e <KPD_Void_Init+0xa2>
    1a7c:	b6 cf       	rjmp	.-148    	; 0x19ea <KPD_Void_Init+0xe>

#endif
	}
#endif

}
    1a7e:	cf 91       	pop	r28
    1a80:	df 91       	pop	r29
    1a82:	08 95       	ret

00001a84 <KPD_voidGet_KPD_Status>:

u8 KPD_voidGet_KPD_Status(void)
{
    1a84:	df 93       	push	r29
    1a86:	cf 93       	push	r28
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	6a 97       	sbiw	r28, 0x1a	; 26
    1a8e:	0f b6       	in	r0, 0x3f	; 63
    1a90:	f8 94       	cli
    1a92:	de bf       	out	0x3e, r29	; 62
    1a94:	0f be       	out	0x3f, r0	; 63
    1a96:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Pressed_Key = KPD_No_Pressed_Key, Col_index, Row_index, Local_u8Pin_State;
    1a98:	8f ef       	ldi	r24, 0xFF	; 255
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8KPD_Arr[KPD_u8_Row_NB][KPD_u8_Col_NB] = KPD_Arr_VAL;
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	05 96       	adiw	r24, 0x05	; 5
    1aa0:	9f 8b       	std	Y+23, r25	; 0x17
    1aa2:	8e 8b       	std	Y+22, r24	; 0x16
    1aa4:	e0 e7       	ldi	r30, 0x70	; 112
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	f9 8f       	std	Y+25, r31	; 0x19
    1aaa:	e8 8f       	std	Y+24, r30	; 0x18
    1aac:	f0 e1       	ldi	r31, 0x10	; 16
    1aae:	fa 8f       	std	Y+26, r31	; 0x1a
    1ab0:	e8 8d       	ldd	r30, Y+24	; 0x18
    1ab2:	f9 8d       	ldd	r31, Y+25	; 0x19
    1ab4:	00 80       	ld	r0, Z
    1ab6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ab8:	99 8d       	ldd	r25, Y+25	; 0x19
    1aba:	01 96       	adiw	r24, 0x01	; 1
    1abc:	99 8f       	std	Y+25, r25	; 0x19
    1abe:	88 8f       	std	Y+24, r24	; 0x18
    1ac0:	ee 89       	ldd	r30, Y+22	; 0x16
    1ac2:	ff 89       	ldd	r31, Y+23	; 0x17
    1ac4:	00 82       	st	Z, r0
    1ac6:	8e 89       	ldd	r24, Y+22	; 0x16
    1ac8:	9f 89       	ldd	r25, Y+23	; 0x17
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	9f 8b       	std	Y+23, r25	; 0x17
    1ace:	8e 8b       	std	Y+22, r24	; 0x16
    1ad0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ad2:	91 50       	subi	r25, 0x01	; 1
    1ad4:	9a 8f       	std	Y+26, r25	; 0x1a
    1ad6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1ad8:	ee 23       	and	r30, r30
    1ada:	51 f7       	brne	.-44     	; 0x1ab0 <KPD_voidGet_KPD_Status+0x2c>


#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB;Col_index++)
    1adc:	1a 82       	std	Y+2, r1	; 0x02
    1ade:	60 c0       	rjmp	.+192    	; 0x1ba0 <KPD_voidGet_KPD_Status+0x11c>
	{
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		//Activate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Low);
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	e8 59       	subi	r30, 0x98	; 152
    1aea:	ff 4f       	sbci	r31, 0xFF	; 255
    1aec:	90 81       	ld	r25, Z
    1aee:	83 e0       	ldi	r24, 0x03	; 3
    1af0:	69 2f       	mov	r22, r25
    1af2:	40 e0       	ldi	r20, 0x00	; 0
    1af4:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1af8:	19 82       	std	Y+1, r1	; 0x01
    1afa:	3f c0       	rjmp	.+126    	; 0x1b7a <KPD_voidGet_KPD_Status+0xf6>

			//Read the current Row
			DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	88 2f       	mov	r24, r24
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	fc 01       	movw	r30, r24
    1b04:	e4 59       	subi	r30, 0x94	; 148
    1b06:	ff 4f       	sbci	r31, 0xFF	; 255
    1b08:	90 81       	ld	r25, Z
    1b0a:	9e 01       	movw	r18, r28
    1b0c:	2c 5f       	subi	r18, 0xFC	; 252
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	69 2f       	mov	r22, r25
    1b14:	a9 01       	movw	r20, r18
    1b16:	0e 94 0e 0c 	call	0x181c	; 0x181c <DIO_u8_GetPin_value>

			//check if switch is pressed
			if(DIO_u8_Low == Local_u8Pin_State)
    1b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1c:	88 23       	and	r24, r24
    1b1e:	51 f5       	brne	.+84     	; 0x1b74 <KPD_voidGet_KPD_Status+0xf0>
			{
				Local_u8Pressed_Key = Local_u8KPD_Arr[Row_index][Col_index];
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	48 2f       	mov	r20, r24
    1b2a:	50 e0       	ldi	r21, 0x00	; 0
    1b2c:	22 0f       	add	r18, r18
    1b2e:	33 1f       	adc	r19, r19
    1b30:	22 0f       	add	r18, r18
    1b32:	33 1f       	adc	r19, r19
    1b34:	ce 01       	movw	r24, r28
    1b36:	01 96       	adiw	r24, 0x01	; 1
    1b38:	82 0f       	add	r24, r18
    1b3a:	93 1f       	adc	r25, r19
    1b3c:	84 0f       	add	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	fc 01       	movw	r30, r24
    1b42:	34 96       	adiw	r30, 0x04	; 4
    1b44:	80 81       	ld	r24, Z
    1b46:	8b 83       	std	Y+3, r24	; 0x03
    1b48:	0f c0       	rjmp	.+30     	; 0x1b68 <KPD_voidGet_KPD_Status+0xe4>

				//Polling ( busy waiting ) until the key is released

				while(DIO_u8_Low == Local_u8Pin_State)
				{
					DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	88 2f       	mov	r24, r24
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	fc 01       	movw	r30, r24
    1b52:	e4 59       	subi	r30, 0x94	; 148
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	90 81       	ld	r25, Z
    1b58:	9e 01       	movw	r18, r28
    1b5a:	2c 5f       	subi	r18, 0xFC	; 252
    1b5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	69 2f       	mov	r22, r25
    1b62:	a9 01       	movw	r20, r18
    1b64:	0e 94 0e 0c 	call	0x181c	; 0x181c <DIO_u8_GetPin_value>
			{
				Local_u8Pressed_Key = Local_u8KPD_Arr[Row_index][Col_index];

				//Polling ( busy waiting ) until the key is released

				while(DIO_u8_Low == Local_u8Pin_State)
    1b68:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6a:	88 23       	and	r24, r24
    1b6c:	71 f3       	breq	.-36     	; 0x1b4a <KPD_voidGet_KPD_Status+0xc6>
				{
					DIO_u8_GetPin_value(KPD_PORT, KPD_Au8_Row_PINS[Row_index], &Local_u8Pin_State);
				}
				return Local_u8Pressed_Key;
    1b6e:	fb 81       	ldd	r31, Y+3	; 0x03
    1b70:	fd 8b       	std	Y+21, r31	; 0x15
    1b72:	1c c0       	rjmp	.+56     	; 0x1bac <KPD_voidGet_KPD_Status+0x128>
#if  KPD_u8Connection_Type == KPD_u8_Pull_Up

		//Activate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_Low);

		for(Row_index =0; Row_index < KPD_u8_Row_NB; Row_index++){
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	8f 5f       	subi	r24, 0xFF	; 255
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	84 30       	cpi	r24, 0x04	; 4
    1b7e:	08 f4       	brcc	.+2      	; 0x1b82 <KPD_voidGet_KPD_Status+0xfe>
    1b80:	bd cf       	rjmp	.-134    	; 0x1afc <KPD_voidGet_KPD_Status+0x78>
				}
				return Local_u8Pressed_Key;
			}
		}
		//DeActivate the current Column
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	fc 01       	movw	r30, r24
    1b8a:	e8 59       	subi	r30, 0x98	; 152
    1b8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8e:	90 81       	ld	r25, Z
    1b90:	83 e0       	ldi	r24, 0x03	; 3
    1b92:	69 2f       	mov	r22, r25
    1b94:	41 e0       	ldi	r20, 0x01	; 1
    1b96:	0e 94 8a 09 	call	0x1314	; 0x1314 <DIO_u8_SetPin_value>
	u8 Local_u8KPD_Arr[KPD_u8_Row_NB][KPD_u8_Col_NB] = KPD_Arr_VAL;


#if  KPD_u8Activation_Type == KPD_u8Active_Col

	for(Col_index =0; Col_index < KPD_u8_Col_NB;Col_index++)
    1b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9c:	8f 5f       	subi	r24, 0xFF	; 255
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	84 30       	cpi	r24, 0x04	; 4
    1ba4:	08 f4       	brcc	.+2      	; 0x1ba8 <KPD_voidGet_KPD_Status+0x124>
    1ba6:	9c cf       	rjmp	.-200    	; 0x1ae0 <KPD_voidGet_KPD_Status+0x5c>
		DIO_u8_SetPin_value(KPD_PORT, KPD_Au8_Col_PINS[Col_index], DIO_u8_High);
#endif
	}
#endif

	return Local_u8Pressed_Key;
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	8d 8b       	std	Y+21, r24	; 0x15
    1bac:	8d 89       	ldd	r24, Y+21	; 0x15
}
    1bae:	6a 96       	adiw	r28, 0x1a	; 26
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	cf 91       	pop	r28
    1bbc:	df 91       	pop	r29
    1bbe:	08 95       	ret

00001bc0 <main>:
#include "CLCD_Interface.h"
#include "KPD_Interface.h"


void main(void)
{
    1bc0:	df 93       	push	r29
    1bc2:	cf 93       	push	r28
    1bc4:	0f 92       	push	r0
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
	u8 Key_Value;
	CLCD_voidInit();
    1bca:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidInit>
	KPD_Void_Init();
    1bce:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <KPD_Void_Init>
	while(1)
	{
		do
		{
			Key_Value = KPD_voidGet_KPD_Status();
    1bd2:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <KPD_voidGet_KPD_Status>
    1bd6:	89 83       	std	Y+1, r24	; 0x01

		}while(Key_Value == 0xff);
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	8f 3f       	cpi	r24, 0xFF	; 255
    1bdc:	d1 f3       	breq	.-12     	; 0x1bd2 <main+0x12>

		CLCD_voidWriteNumber(Key_Value);
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	88 2f       	mov	r24, r24
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	bc 01       	movw	r22, r24
    1bea:	cd 01       	movw	r24, r26
    1bec:	0e 94 0e 09 	call	0x121c	; 0x121c <CLCD_voidWriteNumber>
    1bf0:	f0 cf       	rjmp	.-32     	; 0x1bd2 <main+0x12>

00001bf2 <__udivmodqi4>:
    1bf2:	99 1b       	sub	r25, r25
    1bf4:	79 e0       	ldi	r23, 0x09	; 9
    1bf6:	04 c0       	rjmp	.+8      	; 0x1c00 <__udivmodqi4_ep>

00001bf8 <__udivmodqi4_loop>:
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	96 17       	cp	r25, r22
    1bfc:	08 f0       	brcs	.+2      	; 0x1c00 <__udivmodqi4_ep>
    1bfe:	96 1b       	sub	r25, r22

00001c00 <__udivmodqi4_ep>:
    1c00:	88 1f       	adc	r24, r24
    1c02:	7a 95       	dec	r23
    1c04:	c9 f7       	brne	.-14     	; 0x1bf8 <__udivmodqi4_loop>
    1c06:	80 95       	com	r24
    1c08:	08 95       	ret

00001c0a <__udivmodsi4>:
    1c0a:	a1 e2       	ldi	r26, 0x21	; 33
    1c0c:	1a 2e       	mov	r1, r26
    1c0e:	aa 1b       	sub	r26, r26
    1c10:	bb 1b       	sub	r27, r27
    1c12:	fd 01       	movw	r30, r26
    1c14:	0d c0       	rjmp	.+26     	; 0x1c30 <__udivmodsi4_ep>

00001c16 <__udivmodsi4_loop>:
    1c16:	aa 1f       	adc	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	ee 1f       	adc	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	a2 17       	cp	r26, r18
    1c20:	b3 07       	cpc	r27, r19
    1c22:	e4 07       	cpc	r30, r20
    1c24:	f5 07       	cpc	r31, r21
    1c26:	20 f0       	brcs	.+8      	; 0x1c30 <__udivmodsi4_ep>
    1c28:	a2 1b       	sub	r26, r18
    1c2a:	b3 0b       	sbc	r27, r19
    1c2c:	e4 0b       	sbc	r30, r20
    1c2e:	f5 0b       	sbc	r31, r21

00001c30 <__udivmodsi4_ep>:
    1c30:	66 1f       	adc	r22, r22
    1c32:	77 1f       	adc	r23, r23
    1c34:	88 1f       	adc	r24, r24
    1c36:	99 1f       	adc	r25, r25
    1c38:	1a 94       	dec	r1
    1c3a:	69 f7       	brne	.-38     	; 0x1c16 <__udivmodsi4_loop>
    1c3c:	60 95       	com	r22
    1c3e:	70 95       	com	r23
    1c40:	80 95       	com	r24
    1c42:	90 95       	com	r25
    1c44:	9b 01       	movw	r18, r22
    1c46:	ac 01       	movw	r20, r24
    1c48:	bd 01       	movw	r22, r26
    1c4a:	cf 01       	movw	r24, r30
    1c4c:	08 95       	ret

00001c4e <__prologue_saves__>:
    1c4e:	2f 92       	push	r2
    1c50:	3f 92       	push	r3
    1c52:	4f 92       	push	r4
    1c54:	5f 92       	push	r5
    1c56:	6f 92       	push	r6
    1c58:	7f 92       	push	r7
    1c5a:	8f 92       	push	r8
    1c5c:	9f 92       	push	r9
    1c5e:	af 92       	push	r10
    1c60:	bf 92       	push	r11
    1c62:	cf 92       	push	r12
    1c64:	df 92       	push	r13
    1c66:	ef 92       	push	r14
    1c68:	ff 92       	push	r15
    1c6a:	0f 93       	push	r16
    1c6c:	1f 93       	push	r17
    1c6e:	cf 93       	push	r28
    1c70:	df 93       	push	r29
    1c72:	cd b7       	in	r28, 0x3d	; 61
    1c74:	de b7       	in	r29, 0x3e	; 62
    1c76:	ca 1b       	sub	r28, r26
    1c78:	db 0b       	sbc	r29, r27
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	09 94       	ijmp

00001c86 <__epilogue_restores__>:
    1c86:	2a 88       	ldd	r2, Y+18	; 0x12
    1c88:	39 88       	ldd	r3, Y+17	; 0x11
    1c8a:	48 88       	ldd	r4, Y+16	; 0x10
    1c8c:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c8e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c90:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c92:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c94:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c96:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c98:	b9 84       	ldd	r11, Y+9	; 0x09
    1c9a:	c8 84       	ldd	r12, Y+8	; 0x08
    1c9c:	df 80       	ldd	r13, Y+7	; 0x07
    1c9e:	ee 80       	ldd	r14, Y+6	; 0x06
    1ca0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ca2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ca4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ca6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ca8:	b9 81       	ldd	r27, Y+1	; 0x01
    1caa:	ce 0f       	add	r28, r30
    1cac:	d1 1d       	adc	r29, r1
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	de bf       	out	0x3e, r29	; 62
    1cb4:	0f be       	out	0x3f, r0	; 63
    1cb6:	cd bf       	out	0x3d, r28	; 61
    1cb8:	ed 01       	movw	r28, r26
    1cba:	08 95       	ret

00001cbc <_exit>:
    1cbc:	f8 94       	cli

00001cbe <__stop_program>:
    1cbe:	ff cf       	rjmp	.-2      	; 0x1cbe <__stop_program>
